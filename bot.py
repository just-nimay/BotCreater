from aiogram import executor, types
from config import TOKEN
from bot_creater import dp, bot
from aiogram.dispatcher import FSMContext

from info import Information, n
import db
import markups as nav

from scripts import FormLayer, FormConfigLayer, FormCollect, FormAddImage, FormLayerConfig, FormDeleteLayer, FormGenerating

@dp.message_handler(commands=['start'])
async def command_start(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    await bot.send_message(message.from_user.id, '===================\n–ü—Ä–∏–≤–µ—Ç, <s>—á–µ–ª–æ–≤–µ–∫</s> <u>{0.username}</u>, —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n‚è§‚è§‚è§\n–¢—ã–∫–∞–π –∫–Ω–æ–ø–∫—É <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìö</b>, –µ—Å–ª–∏ —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ (–ø—Ä–æ—Å—Ç–æ –ª—É—á—à–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –æ–Ω–æ —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç)'.format(message.from_user), reply_markup=nav.mainMenu)
    db.add_user(message.from_user.id)

@dp.message_handler(commands=['main'])
async def cmd_main(message: types.Message):
    await bot.send_message(message.from_user.id, f'===================\n<b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –°–û–ó–î–ê–ù–ò–Ø –ö–û–õ–õ–ï–ö–¶–ò–ò <i>{db.collection_name(message.from_user.id).upper()}</i></b>\n‚è§‚è§‚è§-\n–¢–∞–∫, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–ª–æ–∏ –∏–ª–∏ –∂–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–ª–æ–π. –ù—É –∞ –µ—Å–ª–∏ —Ç—ã —É–∂–µ –≤—Å—ë —á—Ç–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏–ª, —Ç–æ —Ç—ã–∫–∞–π –∫–Ω–æ–ø–∫—É <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å‚öôÔ∏è</b>', reply_markup=nav.mainMenuFull)


@dp.callback_query_handler(lambda c: c.data == 'btnMenu')
async def btnMenu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(f'===================\n<b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –°–û–ó–î–ê–ù–ò–Ø –ö–û–õ–õ–ï–ö–¶–ò–ò <i>{db.collection_name(callback_query.from_user.id).upper()}</i></b>\n‚è§‚è§‚è§-\n–¢–∞–∫, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–ª–æ–∏ –∏–ª–∏ –∂–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–ª–æ–π. –ù—É –∞ –µ—Å–ª–∏ —Ç—ã —É–∂–µ –≤—Å—ë —á—Ç–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏–ª, —Ç–æ —Ç—ã–∫–∞–π –∫–Ω–æ–ø–∫—É <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å‚öôÔ∏è</b>', reply_markup=nav.mainMenuFull)


@dp.callback_query_handler(lambda c: c.data == 'btnInfo')
async def info(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(Information.INFO, reply_markup=nav.inInfo)

@dp.callback_query_handler(lambda c: c.data == 'btnInfoInMenu')
async def info(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(Information.INFO, reply_markup=nav.inInfoToMenu)


@dp.callback_query_handler(lambda c: c.data == 'btnCreateGC')
async def btnCreateGC(callback_query: types.CallbackQuery):  
    await callback_query.message.edit_text('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)')
    await FormCollect.get_collect_name.set()


@dp.callback_query_handler(lambda c: c.data =='btnAddImage')
async def add_image(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(f'–ò —Ç–∞–∫, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —Å–ª–æ–π <i>{db.get_current_layer(callback_query.from_user.id)}</i>\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–∫–∏, –Ω–∞–ø–∏—à–∏ –º–Ω–µ: <i>–≥–æ—Ç–æ–≤–æ</i>')
    await FormAddImage.get_images.set()


@dp.callback_query_handler(lambda c: c.data == 'btnAddLayer')
async def add_layer(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ—è (—Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)')
    await FormLayer.get_layer_name.set()


@dp.callback_query_handler(lambda c: c.data == 'btnLayers')
async def btnLayers(callback_query: types.CallbackQuery):
    layers = db.get_layers(callback_query.from_user.id)
    await callback_query.message.edit_text(f'===================\n<b>–°–õ–û–ò</b>\n‚è§‚è§‚è§\n–í–æ—Ç —Ç–≤–æ–∏ —Å–ª–æ–∏')
    info = db.get_layers(callback_query.from_user.id, is_dict=True, with_info=True)
    for key in info:
        ser_num = info[key]['serial_num']
        req = info[key]['required']
        count_img = info[key]['count_img']
        await bot.send_message(callback_query.from_user.id, f'<b>{key.upper()}</b>\n–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: <i>{ser_num}</i>\n–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <i>{req}</i>\n–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: <i>{count_img}</i>')
    await bot.send_message(callback_query.from_user.id, '–ú–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö', reply_markup=nav.layers)

@dp.callback_query_handler(lambda c: c.data == 'btnBack_inLayers')
async def btnBack_inLayers(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(f'===================\n<b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –°–û–ó–î–ê–ù–ò–Ø –ö–û–õ–õ–ï–ö–¶–ò–ò <i>{db.collection_name(callback_query.from_user.id).upper()}</i></b>\n‚è§‚è§‚è§-\n–¢–∞–∫, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–ª–æ–∏ –∏–ª–∏ –∂–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–ª–æ–π. –ù—É –∞ –µ—Å–ª–∏ —Ç—ã —É–∂–µ –≤—Å—ë —á—Ç–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏–ª, —Ç–æ —Ç—ã–∫–∞–π –∫–Ω–æ–ø–∫—É <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å‚öôÔ∏è</b>', reply_markup=nav.mainMenuFull)


@dp.callback_query_handler(lambda c: c.data == 'btnConfigureLayer')
async def btnConfigureLayer(callback_query: types.CallbackQuery):
    layers = db.get_layers(callback_query.from_user.id, True)
    markup = nav.layer_buttons(layers)
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, f'===================\n<b>–ù–ê–°–¢–†–û–ô–ö–ê –°–õ–û–ï–í</b>\n‚è§‚è§‚è§\n–í—ã–±–µ—Ä–∏ —Å–ª–æ–π', reply_markup=markup)
    await FormConfigLayer.get_layer.set()

#button back in layer configuration
@dp.callback_query_handler(lambda c: c.data == 'btnBackInLayerConfig')
async def btnBackInLayerConfig(callback_query: types.CallbackQuery):
    layers = db.get_layers(callback_query.from_user.id, True)
    markup = nav.layer_buttons(layers)
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, f'===================\n<b>–ù–ê–°–¢–†–û–ô–ö–ê –°–õ–û–ï–í</b>\n‚è§‚è§‚è§\n–í—ã–±–µ—Ä–∏ —Å–ª–æ–π', reply_markup=markup)
    await FormConfigLayer.get_layer.set()

#change serial number
@dp.callback_query_handler(lambda c: c.data == 'btnChangeSerNum')
async def btnChangeSerNum(callback_query: types.CallbackQuery):
    name = db.get_current_layer(callback_query.from_user.id)
    await callback_query.message.edit_text(f'–ù–∞–ø–∏—à–∏ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–ª–æ—è <b>{name}</b>')
    await FormLayerConfig.get_serial_num.set()

#change required
@dp.callback_query_handler(lambda c: c.data == 'btnChangeRequired')
async def btnChangeRequired(callback_query: types.CallbackQuery):
    name = db.get_current_layer(callback_query.from_user.id)
    await callback_query.message.edit_text(f'–ù–∞–ø–∏—à–∏ —Ç—Ä–µ–±—É–µ–º–æ—Å—Ç—å —Å–ª–æ—è {name}\n"–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
    await FormLayerConfig.get_required.set()

#Delete Layer
@dp.callback_query_handler(lambda c: c.data =='btnDeleteLayer')
async def btnDeleteLayer(callback_query: types.CallbackQuery):
    layer = db.get_current_layer(callback_query.from_user.id)
    await callback_query.message.edit_text(f'–¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–π {layer}?\n"–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
    await FormDeleteLayer.request.set()

#+------------------------+
#|     DELETE IMAGE       |
#+------------------------+

@dp.callback_query_handler(lambda c: c.data == 'btnDeleteImage')
async def btnDeleteImage(callback_query: types.CallbackQuery):
    images = db.get_images(callback_query.from_user.id)
    if len(images) == 0:
        await callback_query.answer(text='–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å')
    else:
        global n
        n = 0
        await callback_query.message.edit_text('–ö–∞–∫–æ–µ –∏–∑?')
        await bot.send_document(callback_query.from_user.id, images[n], f'{n + 1} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', reply_markup=nav.gallery)

# button back
@dp.callback_query_handler(lambda c: c.data == 'btnBackImage')
async def btnBackImage(callback_query: types.CallbackQuery):
    global n
    images = db.get_images(callback_query.from_user.id)
    print('n:', n)
    if n <= 0:
        await callback_query.answer(text='–¢–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç...')
    else:
        n -= 1
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        await bot.send_document(callback_query.from_user.id, images[n], f'{n + 1} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', reply_markup=nav.gallery)



# button next
@dp.callback_query_handler(lambda c: c.data == 'btnNextImage')
async def btnNextImage(callback_query: types.CallbackQuery):    
    global n
    images = db.get_images(callback_query.from_user.id)
    count_img = len(images) - 1
    print('count_img:', count_img)
    print('n:', n)
    if n == count_img:
        await callback_query.answer(text='–î–∞–ª—å—à–µ –Ω–µ–∫—É–¥–∞')
    else:
        n += 1
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        await bot.send_document(callback_query.from_user.id, images[n], f'{n + 1} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', reply_markup=nav.gallery)


# button select image
@dp.callback_query_handler(lambda c: c.data == 'btnThisImage')
async def btnThisImage(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    global n
    images = db.get_images(callback_query.from_user.id)
    cur_img = images[n]
    print('current_image:', cur_img)
    db.delete_image(cur_img)
    await bot.send_message(callback_query.from_user.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!')

    name = db.get_current_layer(callback_query.from_user.id)
    info = db.get_info_layer(callback_query.from_user.id)
    serial_number = info['serial_num']
    count_img = info['count_img']
    required = info['required']

    await bot.send_message(callback_query.from_user.id, f'===================\n<b>–ù–ê–°–¢–†–û–ô–ö–ê –°–õ–û–Ø <i>{name.upper()}</i></b>\n–ï–≥–æ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n<b>–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä</b>: <i>{serial_number}</i>\n<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</b>: <i>{required}</i>\n<b>–ö–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b> <i>{count_img}</i>', reply_markup=nav.layerConfig)

#+========================================+
#|               GENERATION               |
#+========================================+

@dp.callback_query_handler(lambda c: c.data == 'btnGenerate')
async def btnGenerate(callback_query: types.CallbackQuery):
    info = db.get_layers(callback_query.from_user.id, is_dict=True, with_info=True)
    if len(info) < 2:
        await callback_query.answer(text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—ë–≤!')
    else:
        await callback_query.message.edit_text(f'–¢–∞–∫, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ –æ–∫')

        #geting layers
        for key in info:
            ser_num = info[key]['serial_num']
            req = info[key]['required']
            count_img = info[key]['count_img']
            await bot.send_message(callback_query.from_user.id, f'<b>{key.upper()}</b>\n–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: <i>{ser_num}</i>\n–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <i>{req}</i>\n–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: <i>{count_img}</i>')
        await bot.send_message(callback_query.from_user.id, '–ï—Å–ª–∏ –≤—Å—ë –æ–∫, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É "–í—Å—ë üëå"', reply_markup=nav.generating)

        await FormGenerating.confirm.set()





@dp.message_handler()
async def empty_handler(message: types.Message):
    if message.text == 'test':
        info = db.get_layers(message.from_user.id, is_dict=True, with_info=True)
        for key in info:
            ser_num = info[key]['serial_num']
            req = info[key]['required']
            count_img = info[key]['count_img']
            await message.answer(f'---------------------------\n<b>{key.upper()}</b>\n–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: <i>{ser_num}</i>\n–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <i>{req}</i>\n–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: <i>{count_img}</i>')
        print('---------------------------')

    await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...')     
 

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)



















